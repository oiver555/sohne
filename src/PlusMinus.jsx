/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 C:\Users\osain\Coding\Projects\3js\Sohne\Maya\scenes\PlusMinus.gltf -o C:\Users\osain\Coding\Projects\3js\Sohne\src\PlusMinus.jsx 
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
export function PlusMinus(props) {
  const { nodes, materials } = useGLTF("./gltf/PlusMinus.gltf");
  const [hover, setHover] = useState(false);
  const groupRef = useRef();
  useFrame(({ camera }) => {
    if (groupRef.current) {
      groupRef.current.lookAt(camera.position);
    }
  });

  const goldMat = new THREE.MeshStandardMaterial({
    color: "gold",
    transparent: true,
    opacity: hover ? 1 : 0.1,
  });
  const baseMat = new THREE.MeshStandardMaterial({
    color: "cyan",
    transparent: true,
    opacity: hover ? 1 : 0.1,
  });
  return (
    <group scale={10} {...props} dispose={null}>
      <group ref={groupRef}>
        <mesh
          onClick={(e) => {
            
            if (e.intersections.length > 4) return;
            props.type === "minus"
              ? props.setAmount((prev) => (prev - 1 === 0 ? 1 : prev - 1))
              : props.setAmount((prev) => prev + 1);
          }}
          onPointerEnter={(e) => {
            setHover(true);
            e.stopPropagation();
          }}
          onPointerLeave={(e) => {
            
            if (e.intersections.length >= 2 || e.intersections.length === 0) {
              setHover(false);
            }
          }}
          rotation={[0, -1.5, 0]}
          geometry={nodes.base.geometry}
          material={baseMat}
        />
        {props.type === "plus" && (
          <mesh
            onClick={() => {
              props.setAmount((prev) => prev + 1);
            }}
            onPointerEnter={(e) => {
              setHover(true);
              e.stopPropagation();
            }}
            onPointerLeave={() => {
              setHover(false);
            }}
            rotation={[0, -1.5, 0]}
            geometry={nodes.plus.geometry}
            material={goldMat}
          />
        )}
        {props.type === "minus" && (
          <mesh
            onClick={() => {
              props.setAmount((prev) => (prev - 1 === 0 ? 1 : prev - 1));
            }}
            onPointerEnter={(e) => {
              setHover(true);
              e.stopPropagation();
            }}
            onPointerLeave={() => {
              setHover(false);
            }}
            rotation={[0, -1.5, 0]}
            geometry={nodes.minus.geometry}
            material={goldMat}
          />
        )}
      </group>
    </group>
  );
}
