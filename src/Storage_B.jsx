/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useContext, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { StorageContext } from "./ExpContext";
import { animated } from "@react-spring/three";

export default function Storage_B(props) {
  const { nodes, materials } = useGLTF("./gltf/Storage_B.glb");

  const [
    Wood027ambientOcclusion,
    Wood027basecolor,
    Wood027normal,
    glassnormal,
  ] = useTexture([
    "/textures/Wood_027_ambientOcclusion.jpg",
    "/textures/Wood_027_basecolor.jpg",
    "./textures/Wood_027_normal.jpg",
    "./textures/glassnormal.jpg",
  ]);

  const { storageBRef, storageRotation } = useContext(StorageContext);

  Wood027basecolor.wrapS = THREE.RepeatWrapping;
  Wood027basecolor.wrapT = THREE.RepeatWrapping;
  Wood027basecolor.repeat.set(3, 3);
  Wood027ambientOcclusion.wrapS = THREE.RepeatWrapping;
  Wood027ambientOcclusion.wrapT = THREE.RepeatWrapping;
  Wood027ambientOcclusion.repeat.set(3, 3);
  Wood027normal.wrapS = THREE.RepeatWrapping;
  Wood027normal.wrapT = THREE.RepeatWrapping;
  Wood027normal.repeat.set(3, 3);
  Wood027basecolor.colorSpace = THREE.SRGBColorSpace;

  const woodMtl = new THREE.MeshPhysicalMaterial({
    color: new THREE.Color(2, 2.1, 2),
    map: Wood027basecolor,
    aoMap: Wood027ambientOcclusion,
    aoMapIntensity: 1,
    side: THREE.DoubleSide,
    envMapIntensity: 0.2,
    normalMap: Wood027normal,
    normalMapType: THREE.TangentSpaceNormalMap,
    normalScale: new THREE.Vector2(0.2, 0.2),
  });

  const glassMtl = new THREE.MeshPhysicalMaterial({
    color: new THREE.Color(0, 0.3, 2),
    metalness: 0.1, // Adjust the metalness property
    roughness: 1, // Adjust the roughness property
    transparent: true, // Enable transparency
    opacity: 0.5, // Set the opacity level
    clearcoat: 0.7, // Enable clearcoat
    transmission: 0.9, //
    normalMap: glassnormal,
    envMapIntensity: 1,
    reflectivity: 0.8,
    normalMapType: THREE.TangentSpaceNormalMap,
    normalScale: new THREE.Vector2(0.4, 0.4),
  });
  const goldMtl = new THREE.MeshPhysicalMaterial({
    color: 0xffd700, // Gold color
    metalness: 0.8, // Fully metallic
    roughness: 0.2,
    specularColor: new THREE.Color(3, 1, 1),
    specularIntensity: 3,
    clearcoat: 0.2,
    clearcoatRoughness: 0.2,
    emissive: 1,
  });

  return (
    <animated.group
      name="Storage_B_grp"
      position={[23, 0, 16]}
      rotation={[-Math.PI / 2, 0, -1.4]}
      scale={7.515}
      visible={false}
      ref={storageBRef}
    >
      <animated.group rotation-z={storageRotation.rotate}>
        <mesh
          name="Storage_B_Door_1"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Door_1.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Door_2"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Door_2.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Drawers"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Drawers.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Frame"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Frame.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Glass"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Glass.geometry}
          material={glassMtl}
        />
        <mesh
          name="Storage_B_Handle_1"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Handle_1.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Handle_2"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Handle_2.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Knob"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Knob.geometry}
          material={goldMtl}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <mesh
          name="Storage_B_Leg_1"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Leg_1.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Leg_2"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Leg_2.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Leg_3"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Leg_3.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Leg_4"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Leg_4.geometry}
          material={woodMtl}
        />
        <mesh
          name="Storage_B_Leg_5"
          castShadow
          receiveShadow
          geometry={nodes.Storage_B_Leg_5.geometry}
          material={woodMtl}
        />
      </animated.group>
    </animated.group>
  );
}

useGLTF.preload("gltf/Storage_B.glb");
