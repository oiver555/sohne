/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useContext, useEffect, useState } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { ChairsContext, GlobalStateContext } from "./ExpContext";
import { animated, useSpring } from "@react-spring/three";
import {
  EffectComposer,
  Outline,
  Selection,
  Select,
} from "@react-three/postprocessing";
import { KernelSize } from "postprocessing";
import { useGesture } from "react-use-gesture";

export default function Chair_C(props) {
  console.log("[Chair_C.js]");
  const { nodes } = useGLTF("./gltf/Chair_C.glb");
  const [hovered, setHovered] = useState(false);
  const {
    setobjConfig,
    currChair,
    setCurrBaseTexture,
    setCurrCushionTexture1,
  } = useContext(GlobalStateContext);
  const [chairdiffuse, chairglossiness, chairnormalmap] = useTexture([
    "./textures/chair_diffuse.jpg",
    "./textures/chair_glossiness.jpg",
    "./textures/chair_normal_map.jpg",
  ]);
  chairdiffuse.flipY = false;
  const { chairCRef, chairRotation } = useContext(ChairsContext);

  const woodMat = new THREE.MeshStandardMaterial({
    map: chairdiffuse,
    roughnessMap: chairglossiness,
    roughness: 0.5,
    envMapIntensity: 0.2,
    normalMap: chairnormalmap,
    normalScale: new THREE.Vector2(1.0, 1.0),
  });
  const [spring, set] = useSpring(() => ({
    rotation: [0, 0, 0],
  }));
  const bind = useGesture({
    onDrag: ({ offset: [x] }) => (chairCRef.current.rotation.y = x * 0.01),
  });

  useEffect(() => {
    if (currChair === "c") {
      setobjConfig({
        baseTextures: ["./textures/chair_diffuse.jpg"],
        cushionTextures: [],
      });
      setCurrBaseTexture("./textures/chair_diffuse.jpg");
      setCurrCushionTexture1(null);
    }
  }, [currChair]);

  return (
    <animated.group
      {...spring}
      {...bind()}
      ref={chairCRef}
      name="Chair_C_grp"
      position={[19.8, 0, 14]}
      rotation={[0, 0, -Math.PI]}
      rotation-y={chairRotation.rotate}
      scale={[0.161, -0.161, 0.161]}
      visible={true}
    >
      <Selection>
        <EffectComposer multisampling={8} autoClear={false}>
          <Outline
            blur
            kernelSize={KernelSize.VERY_SMALL}
            resolutionScale={0}
            visibleEdgeColor="white"
            edgeStrength={2}
            width={500}
          />
          <Select enabled={hovered}>
            <mesh
              visible={true}
              name="Chair_CPIV"
              castShadow
              receiveShadow
              geometry={nodes.Chair_CPIV.geometry}
              material={woodMat}
              // position={[0, 0, 0]}
              onPointerOver={(event) => {
                setHovered(true);
                event.stopPropagation();
              }}
              onPointerOut={(event) => {
                setHovered(false);
                event.stopPropagation();
              }}
            />
          </Select>
        </EffectComposer>
      </Selection>
    </animated.group>
  );
}

 