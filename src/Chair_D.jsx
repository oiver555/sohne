/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useContext, useEffect, useMemo, useState } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { ChairsContext, GlobalStateContext } from "./ExpContext";
import { animated, useSpring } from "@react-spring/three";
import {
  EffectComposer,
  Outline,
  Selection,
  Select,
} from "@react-three/postprocessing";
import { KernelSize } from "postprocessing";
import { useGesture } from "react-use-gesture";

export default function Chair_D(props) {
  console.log("[Chair_D.js]");
  const { nodes } = useGLTF("./gltf/Chair_D.glb");
  const { chairDRef, chairRotation } = useContext(ChairsContext);
  const [Chairpbrdiffuse, Chairpbrnormal, Chairpbrroughness] = useTexture([
    "./textures/Chair_pbr_diffuse.jpg",
    "./textures/Chair_pbr_normal.jpg",
    "/textures/Chair_pbr_roughness.jpg",
  ]);
  const {
    setobjConfig,
    currChair,
    currBaseTexture,
    setCurrBaseTexture,
    setCurrCushionTexture1,
    currCushionTexture1,
  } = useContext(GlobalStateContext);
  const [hovered, setHovered] = useState({
    legs: false,
    trim: false,
    cushion: false,
  });

  Chairpbrdiffuse.flipY = false;
  Chairpbrnormal.flipY = false;
  Chairpbrroughness.flipY = false;
  const fabricMtl = useMemo(
    () =>
      new THREE.MeshStandardMaterial({
        map: Chairpbrdiffuse,
        roughnessMap: Chairpbrroughness,
        normalMap: Chairpbrnormal,
        roughness: 1,
        metalness: 0,
        envMapIntensity: 0.2,
      }),
    []
  );

  const [spring, set] = useSpring(() => ({
    rotation: [0, 0, 0],
    config: { friction: 10 },
  }));
  const bind = useGesture({
    onDrag: ({ offset: [x] }) => (chairDRef.current.rotation.y = x * 0.01),
  });

  useEffect(() => {
    if (currChair === "d") {
      console.log(currChair);
      setobjConfig({
        baseTextures: [
          "./textures/Chair_pbr_diffuse.jpg",
          "./textures/Elsa_plaid_fabric_b.jpg",
          "./textures/plaid_Texture_1.jpg",
        ],
        cushionTextures: [
          // "./textures/Chair_pbr_diffuse.jpg",
          // "./textures/Elsa_plaid_fabric_b.jpg",
          // "./textures/plaid_Texture_1.jpg",
        ],
        legTextures: [
          // "./textures/Chair_pbr_diffuse.jpg",
          // "./textures/Elsa_plaid_fabric_b.jpg",
          // "./textures/plaid_Texture_1.jpg",
        ],
      });

      setCurrBaseTexture("./textures/Chair_pbr_diffuse.jpg");
      // setCurrCushionTexture1("/textures/The Reader armchair_diffuse.jpg");
    }
  }, [currChair]);

  return (
    <animated.group
      name="Chair_D_grp"
      position={[19.8, 3.8, 14]}
      rotation-y={chairRotation.rotate}
      scale={[0.011, -0.011, 0.011]}
      ref={chairDRef}
      {...spring}
      {...bind()}
    >
      <group rotation={[0, 1.4, Math.PI]}>
        <Selection>
          <EffectComposer multisampling={8} autoClear={false}>
            <Outline
              blur
              kernelSize={KernelSize.VERY_SMALL}
              resolutionScale={0}
              visibleEdgeColor="white"
              edgeStrength={2}
              width={500}
            />
            <Select enabled={hovered.legs}>
              <group
                name="Chair_D_Legs"
                position={[0, -167.65, 165.597]}
                scale={6.351}
              >
                <mesh
                  name="Chair_D_LegsPIV"
                  castShadow
                  receiveShadow
                  geometry={nodes.Chair_D_LegsPIV.geometry}
                  material={fabricMtl}
                  position={[0, -28.272, -26.076]}
                  onPointerOver={(event) => {
                    setHovered({
                      legs: true,
                      trim: false,
                      cushion: false,
                    });
                    event.stopPropagation();
                  }}
                  onPointerOut={(event) => {
                    setHovered({
                      legs: false,
                      trim: false,
                      cushion: false,
                    });
                    event.stopPropagation();
                  }}
                />
              </group>
            </Select>
            <Select enabled={hovered.trim}>
              <group
                name="Chair_D_trim"
                position={[0, 93.281, 174.735]}
                scale={6.351}
              >
                <mesh
                  name="Chair_D_trimPIV"
                  castShadow
                  receiveShadow
                  geometry={nodes.Chair_D_trimPIV.geometry}
                  material={fabricMtl}
                  position={[0, -69.36, -27.515]}
                  onPointerEnter={(event) => {
                    setHovered({
                      legs: false,
                      trim: true,
                      cushion: false,
                    });
                    event.stopPropagation();
                  }}
                  onPointerOver={(event) => {
                    setHovered({
                      legs: false,
                      trim: true,
                      cushion: false,
                    });
                    event.stopPropagation();
                  }}
                  onPointerOut={(event) => {
                    setHovered({
                      legs: false,
                      trim: false,
                      cushion: false,
                    });
                    event.stopPropagation();
                  }}
                />
              </group>
            </Select>
            <Select enabled={hovered.cushion}>
              <group
                name="Chiar_D_Body"
                position={[0, 220.604, 104.608]}
                scale={6.351}
              >
                <mesh
                  name="Chiar_D_BodyPIV"
                  castShadow
                  receiveShadow
                  geometry={nodes.Chiar_D_BodyPIV.geometry}
                  material={fabricMtl}
                  position={[0, -89.409, -16.472]}
                  onPointerOver={(event) => {
                    setHovered({
                      legs: false,
                      trim: false,
                      cushion: true,
                    });
                    event.stopPropagation();
                  }}
                  onPointerOut={(event) => {
                    setHovered({
                      legs: false,
                      trim: false,
                      cushion: false,
                    });
                    event.stopPropagation();
                  }}
                />
              </group>
            </Select>
          </EffectComposer>
        </Selection>
      </group>
    </animated.group>
  );
}

useGLTF.preload("gltf/Chair_D.glb");
