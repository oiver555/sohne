/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useLoader } from "@react-three/fiber";
import { RGBELoader } from "three-stdlib";

export function Aquarium(props) {
  const { nodes, materials } = useGLTF("./gltf/Aquarium.glb");
  const [water, base, sandstone, pebbles, branches] = useTexture([
    "/textures/livingroom/Living_Room_2_Shaded__Aquarium_Water_Aquarium_WaterShape_rmanDefaultBakeDisplay.png",
    "/textures/livingroom/Living_Room_2_Shaded__Aquarium_Palm_Base_Aquarium_Palm_BaseShape_rmanDefaultBakeDisplay.png",
    "/textures/livingroom/Living_Room_2_Shaded__Aquarium_Sandstone_Aquarium_SandstoneShape_rmanDefaultBakeDisplay.png",
    "/textures/livingroom/Living_Room_2_Shaded__Aquarium_Pebbles_Aquarium_PebblesShape_rmanDefaultBakeDisplay.png",
    "/textures/livingroom/Living_Room_2_Shaded__Aquarium_Palm_Branches_Aquarium_Palm_BranchesShape_rmanDefaultBakeDisplay.png",
  ]);

  
  water.flipY = false;
  base.flipY = false;
  sandstone.flipY = false;
  pebbles.flipY = false;
  branches.flipY = false;

  const glassMAt = new THREE.MeshPhysicalMaterial({
   
    transparent: true, // Enable transparency
    metalness: 0, // Metalness of the material (0 for non-metallic surfaces)
    roughness: .051, // Roughness of the material (0 for perfectly smooth) 
    transmission: 1,
    thickness: 1,
    envMapIntensity: .5,
  });

  const waterMat = new THREE.MeshPhysicalMaterial({
    // lightMap: water,
    color: "skyblue",
    opacity: .1,
    metalness: 0, // Metalness of the material (0 for non-metallic surfaces)
    roughness: 0,
    envMapIntensity: .2,
  });

  const baseMat = new THREE.MeshStandardMaterial({
    color: "brown",
    envMapIntensity: .2,

  });

  const sandstoneMat = new THREE.MeshStandardMaterial({
    color: '#D2B48C',
    envMapIntensity: .2,
  });

  const pebblesMat = new THREE.MeshStandardMaterial({
    lightMap: pebbles,
    color: "tan",
    metalness: .2,
    roughness:0,
    envMapIntensity: .1,
  });

  const branchesMat = new THREE.MeshStandardMaterial({
    lightMap: branches,
    envMapIntensity:.5,
    color:"lime",

  });
  return (
    <group {...props} dispose={null}>
      <group position={[78.204, 56.038, -45.219]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Aquarium_WaterPIV.geometry}
          material={waterMat}
          position={[-78.204, -56.038, 45.219]}
        />
      </group>
      <group position={[81.395, 61.551, -48.787]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Aquarium_SandstonePIV.geometry}
          material={sandstoneMat}
          position={[-81.395, -61.551, 48.787]}
        />
      </group>
      <group position={[78.299, 59.016, -45.145]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Aquarium_PebblesPIV.geometry}
          material={pebblesMat}
          position={[-78.299, -59.016, 45.145]}
        />
      </group>
      <group position={[75.325, 65.276, -47.878]}>
        <group position={[-75.325, -65.276, 47.878]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Aquarium_Palm_BranchesShape001.geometry}
            material={branchesMat}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Aquarium_Palm_BranchesShape001_1.geometry}
            material={branchesMat}
          />
        </group>
      </group>
      <group position={[75.231, 61.215, -47.812]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Aquarium_Palm_BasePIV.geometry}
          material={baseMat}
          position={[-75.231, -61.215, 47.812]}
        />
      </group>
      <group position={[78.204, 55.701, -45.219]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Aquarium_BowlPIV.geometry}
          material={glassMAt}
          position={[-78.204, -55.701, 45.219]}
        />
      </group>
    </group>
  );
}

// useGLTF.preload("./gltf/Aquarium.glb");
