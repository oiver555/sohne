/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 arrowCurved.gltf arrowCurved.jsx 
*/

import React, { useContext, useEffect, useMemo, useState, useRef } from "react"
import { useGLTF, useTexture } from '@react-three/drei'
import * as THREE from "three";
import { animated, useSpring } from "@react-spring/three"
import { useGesture } from "react-use-gesture";
import { GlobalStateContext } from "./ExpContext"

export default function ArrowCurved(props) {
   const { nodes, materials } = useGLTF('./gltf/ArrowCurved.gltf')
const mat1 = new THREE.MeshStandardMaterial({})
const mat2 = new THREE.MeshStandardMaterial({})
const [] = useTexture([])
const [hovered, setHovered] = useState(false)
 const [spring, set] = useSpring(() => ({
                rotation: [0, 0, 0],
                config: { friction: 10 },
              }));
const bind = useGesture({
                onDrag: ({ offset: [x] }) => (""),
              });
const {} = useContext()
 const {  currChair, setobjConfig, currBaseTexture } = useContext(GlobalStateContext);

  return (
    <animated.group  {...spring} {...bind()}  {...props} dispose={null}>
      <mesh castShadow receiveShadow  geometry={nodes.arrowCurved.geometry} material={materials.initialShadingGroup} />
    </animated.group>
  )
}


